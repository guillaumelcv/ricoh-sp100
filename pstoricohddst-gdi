#!/usr/bin/env bash

# CUPS filter file
# Author: madlynx (github.com/madlynx)
# Last change: 18.01.2020 by mishta-real (github.com/mishta-real)

# Debug mode: change to 'yes' to enable
DEBUG=no
# SP100 won't print in Debug mode :)

function log() {
    [[ $DEBUG = "yes" ]] && echo "$@" | logger -t "$0[$$]"
}

function logpipe() {
    [[ $DEBUG = "yes" ]] && echo "$@" | logger -t "$0[$$]"
}

function trapINT() {
    log "trapINT()"
    [ "x$trp" = "x" ] &&  trp="yes" || return
    sleep 30 && { [[ ! $DEBUG = "yes" ]] && rm -rf "$tmp_dir"; log "Cleanup complete"; } &
    exit
}

function stop() {
    log "Stop stop page";
    echo "stop" > "$tmp_dir"/999999999-page.pbm
}

function flush_pjl_header() {
    cat <<EOF
%-12345X@PJL$e
@PJL SET TIMESTAMP=$print_date$e
@PJL SET FILENAME=$file_name$e
@PJL SET COMPRESS=JBIG$e
@PJL SET USERNAME=$user$e
@PJL SET COVER=OFF$e
@PJL SET HOLD=OFF$e
EOF
}

function flush_pjl_footer() {
    cat <<EOF
@PJL EOJ$e
%-12345X
EOF
}

function flush_page_header() {
    cat <<EOF
@PJL SET PAGESTATUS=START$e
@PJL SET COPIES=$copies_number$e
@PJL SET MEDIASOURCE=$mediasource$e
@PJL SET MEDIATYPE=PLAINRECYCLE$e
@PJL SET PAPER=$pagesize$e
@PJL SET PAPERWIDTH=$width$e
@PJL SET PAPERLENGTH=$height$e
@PJL SET RESOLUTION=$resolution$e
@PJL SET IMAGELEN=$image_size$e
EOF
}

function flush_page_footer() {
    cat <<EOF
@PJL SET DOTCOUNT=1132782$e
@PJL SET PAGESTATUS=END$e
EOF
}

function convert_to_pbmraw() {
    log "Converting document to pages"
    gs -sDEVICE=ps2write -sOutputFile=- -r"$resolution" -dQUIET -dBATCH -dNOPAUSE -dNOSAFER - | gs -sDEVICE=pbmraw -sOutputFile="$tmp_dir"/%03d-page.pbm -r"$resolution" -dQUIET -dBATCH -dNOPAUSE -dNOSAFER -
    log "Conversion complete"
}

function print_page() {
    # Converting page to JBIG format (parameters are very special for this printer!)
    pbmtojbg -p 72 -o 3 -m 0 -q < "$tmp_dir"/"$page" > "$tmp_dir"/raster.jbig

    # Taking image size
    image_size=$(wc -c < "$tmp_dir"/raster.jbig)

    # Taking image dimensions
    read -r width height < <(identify -format "%w %h" "$page")
    log "Identified as ${width}x${height}"

    # Flushing page header
    flush_page_header

    # Flushing image
    log "Flushing image $page"
    cat "$tmp_dir"/raster.jbig

    # Flushing page footer
    # TODO: pixelcount for toner estimate
    flush_page_footer
}

log "Called with cmdline: $0 $*"

trap "stop; trapINT" SIGINT SIGTERM SIGQUIT
#trap 'echo No' SIGINT SIGTERM SIGQUIT EXIT

readonly e=$(printf \\r\\n)  # <CR><LF> (EOL)

print_date=$(date "+%Y/%m/%d %H:%M:%S") # Date of printing

# Temporary directory
tmp_dir="/tmp/pstoricohddst-gdi-$job_id"
mkdir -p "$tmp_dir"

# Command line parameters
job_id=$1           # Job ID
user=$2             # User started the job
file_name=$3        # File to print
copies_number=$4    # Number of copies to print
options=$5          # Job parameters

pagesize="A4"
resolution="600"
mediasource="TRAY1"

for opt in $options; do
    case "$opt" in
        PageSize=*)
            pagesize=$(echo "${opt#PageSize=}" | tr '[:lower:]' '[:upper:]')
            ;;
        InputSlot=*)
            mediasource=${opt#InputSlot=}
            ;;
    esac
done

[[ $DEBUG = "yes" ]] && exec > "$tmp_dir"/output.stream #> >(tee "$tmp_dir"/output.stream)


if [[ -x $(which inotifywait) ]]
then
    log "Asynchronous variant"
    (
        stage="empty"
        inotifywait -rmq -e close_write --format '%f' "$tmp_dir" | grep --line-buffered 'page.pbm$' | while read -r page
        do
            log "Page submitted"

            if [[ $stage = "empty" ]]
            then
                log "1st stage. Flushing PJL header."
                flush_pjl_header
                stage="printing"
            fi

	    if [[ $page = "999999999-page.pbm" ]]
            then
		log "Last stage. Flushing PJL footer."
                flush_pjl_footer

                pid=$(pgrep "$tmp_dir")
		[[ -n $pid ]] && kill "$pid"
		break
            fi

	    if [[ $stage = "printing" ]]
            then
                print_page
            fi
	done
	) &

        # Converting from PostScript to PostScript-monochrome,
        # then to PBM image format (per page)
        convert_to_pbmraw

	stop
	wait

	trapINT
else
	log "Synchronous variant"

        # Converting from PostScript to PostScript-monochrome,
        #then to PBM image format (per page)
        convert_to_pbmraw

        # Flushing PJL header
        flush_pjl_header

	for page in "$tmp_dir"/*-page.pbm
        do
            log "Page $page"
            print_page
	done

	# Flushing PJL footer
        flush_pjl_footer
fi

# [[ $DEBUG != "yes" ]] && rm -rf "$tmp_dir"

exit 0
